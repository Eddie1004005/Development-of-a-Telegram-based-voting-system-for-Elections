Scenario: Revolutionizing NACOS Elections

You’re a student at NACOS, ready to participate in the elections and make your voice heard.

The traditional voting process is a hassle—long queues, slow registrations, and delayed results dampen your enthusiasm.

Then you hear about NACOSPollBuddy, a Telegram bot designed to simplify the entire voting process.

You try using it but aren’t sure how to register or cast your vote.

Will NACOSPollBuddy live up to its promise of secure, stress-free voting, or will the challenges of the old system persist?

Below is a simplified version of your project presentation content, tailored for an oral presentation to help you deliver it confidently despite stage fright. The content is concise, uses simple language, and follows the structure of your provided PowerPoint template. It’s designed to be easy to read and present, with key points highlighted for clarity. I've incorporated the system architecture as requested and aligned the content with your project outline from the Word document. Each slide corresponds to the sections in your template, ensuring it’s engaging and straightforward for your audience.

---

### Slide 1: Title Slide
**DESIGN AND IMPLEMENTATION OF A TELEGRAM BOT FOR ELECTIONS IN NACOS**

- **Presented by**: Blessing Asuquo
- **Matric. No**: 21CH029945
- **Supervised by**: Mr. Chukwuebuka Ejiobih
- **Purpose**: To share a secure and easy way to vote using a Telegram bot for NACOS elections.

*Notes for Presentation*:  
Hi everyone, I’m Blessing, and today I’ll talk about my project—a Telegram bot for NACOS elections. It’s designed to make voting secure, fast, and user-friendly. Let’s dive in!

---

### Slide 2: Project Overview
**What’s This Project About?**

- I built a Telegram bot to improve NACOS elections.
- It replaces Google Forms, which has issues like lack of security and trust.
- The bot makes voting easy, secure, and transparent for students.
- Key features: voter registration, secure voting, campaign management, and real-time results.

*Notes for Presentation*:  
This project is about making NACOS elections better. Right now, NACOS uses Google Forms, but it’s not secure enough, and students don’t trust it. My Telegram bot fixes that by making voting simple, safe, and clear. It handles registration, voting, campaigns, and shows results instantly.

---

### Slide 3: Introduction
**Why This Project?**

- Voting is important for choosing leaders in NACOS.
- Traditional voting (paper or Google Forms) has problems:
  - Paper voting is slow and error-prone.
  - Google Forms lacks security and voter privacy.
- My Telegram bot offers:
  - Easy access on phones.
  - Secure voting with encryption.
  - Real-time results to build trust.

*Notes for Presentation*:  
Voting lets NACOS students pick their leaders, but the current methods aren’t great. Paper voting takes time and can have mistakes. Google Forms isn’t secure, and students worry about their privacy. My bot uses Telegram, which students already know, to make voting easy, safe, and transparent.

---

### Slide 4: Statement of Problem
**What’s Wrong with the Current System?**

- Google Forms is used for NACOS elections, but:
  - It’s not secure—data can be hacked.
  - Voter identities can be exposed.
  - Students don’t trust the results (60% distrust, based on feedback).
  - It’s hard to verify voters or prevent double voting.
- These issues reduce student participation and election fairness.

*Notes for Presentation*:  
The problem is that Google Forms, used for NACOS elections, isn’t secure. Votes can be hacked, and voter identities aren’t private. Many students—about 60%—don’t trust the results. It’s also hard to check who’s eligible to vote or stop someone from voting twice. This makes fewer students vote and hurts fairness.

---

### Slide 5: Aims
**What’s the Goal?**

- To create a user-friendly, secure Telegram bot for NACOS elections.
- Make voting easy, safe, and trustworthy for students.

*Notes for Presentation*:  
My goal is simple: build a Telegram bot that makes NACOS elections secure and easy to use. I want students to trust the process and vote confidently.

---

### Slide 6: Objectives
**How Will We Achieve This?**

- **Step 1**: Understand what the bot needs (e.g., voter registration, secure voting).
- **Step 2**: Design the bot’s structure and interface.
- **Step 3**: Build the bot to handle registration, voting, and results.
- **Step 4**: Test the bot for security, usability, and performance.

*Notes for Presentation*:  
To reach my goal, I broke it down into four steps. First, I figured out what the bot needs to do, like registering voters. Second, I designed how it looks and works. Third, I built it to manage voting and results. Finally, I tested it to make sure it’s secure and easy to use.

---

### Slide 7: Significance of Study
**Why Does This Matter?**

- **More Participation**: Students can vote easily on Telegram, which they already use.
- **Better Security**: Uses encryption to protect votes.
- **Increased Trust**: Shows real-time results and audit logs for transparency.
- **Scalable**: Can work for bigger elections in the future.

*Notes for Presentation*:  
This project is important because it makes voting easier—students can use Telegram, which they already know. It’s secure with encryption, so votes are safe. It builds trust by showing results instantly and keeping records. Plus, it can grow to handle larger elections later.

---

### Slide 8: System Architecture
**How Does the Bot Work?**

- **Client-Server Model**:
  - **Front-End (Telegram)**: Users interact with the bot using commands like /vote or /results.
  - **Back-End (Server)**: Processes commands, checks voter eligibility, and stores data.
  - **Database (SQLite)**: Stores voter info, votes, and campaign details securely.
- **Key Features**:
  - Commands for voters, candidates, and admins.
  - Encryption for vote security.
  - Real-time updates for results.
- **Diagram** (simplified description):  
  Imagine a flow: Users send commands via Telegram → Server processes them → Database stores data securely → Results are sent back to users.

*Notes for Presentation*:  
Here’s how the bot works. It uses a client-server model. The front-end is Telegram, where students type commands like /vote. The back-end, a server, processes these commands and checks if voters are eligible. A database, SQLite, securely stores all data, like votes and voter details. The bot uses encryption to keep votes safe and updates results instantly. Picture it like this: you send a command, the server checks it, saves it securely, and sends back results.

---

### Slide 9: Methodology
**How Was It Built?**

- Used **Agile methodology** for flexible development.
- **Steps**:
  - Gathered requirements from students and NACOS leaders.
  - Designed the bot’s structure (commands, database).
  - Built it using JavaScript, Node.js, and Telegram’s API.
  - Tested it for security and ease of use.
- **Tools**:
  - Node.js for coding.
  - SQLite for storing data.
  - Telegraf for Telegram integration.
  - RSA encryption for security.

*Notes for Presentation*:  
I built the bot using a method called Agile, which lets me adjust as I go. First, I talked to students and NACOS leaders to understand their needs. Then, I designed the bot’s commands and database. I coded it using JavaScript and Node.js, connected it to Telegram with Telegraf, and used SQLite to store data. I added RSA encryption for security and tested everything to make sure it’s user-friendly and safe.

---

### Slide 10: Results
**What Did We Find?**

- **Tested with 50+ students**:
  - 100% of functions (register, vote, results) worked.
  - 90% found it easy to use (some had OTP issues, now fixed).
  - 100% secure—no unauthorized access.
  - 93% got fast responses (0.4 seconds for commands).
- **User Feedback**:
  - 87% liked the bot’s simplicity.
  - 90% felt their votes were secure.
- **Charts** (refer to survey results from your document):
  - Pie chart: 76% said it’s a new way to vote.
  - Bar chart: High scores for ease of use and security.

*Notes for Presentation*:  
I tested the bot with over 50 students. All functions, like registering and voting, worked perfectly. 90% said it was easy to use, though some had issues with OTPs, which I fixed. It was 100% secure—no one could access it without permission. Commands responded in 0.4 seconds, and 93% got fast results. Students loved it—87% found it simple, and 90% felt their votes were safe. My charts show 76% thought this was a new voting method, and it scored high for ease and security.

---

### Slide 11: Conclusion
**What Did We Achieve?**

- Built a secure, user-friendly Telegram bot for NACOS elections.
- Fixed issues with Google Forms (security, trust, participation).
- Proved it’s easy to use, secure, and transparent.
- Can be used for other student elections with upgrades (cloud hosting, better database).
- Future: Add more languages, a web dashboard for admins, and stronger security.

*Notes for Presentation*:  
In conclusion, I created a Telegram bot that makes NACOS elections secure and easy. It solves the problems with Google Forms, like lack of security and trust. Testing showed it’s user-friendly, safe, and transparent. It can work for other student elections if we add upgrades, like cloud hosting or a better database. In the future, I’d add more languages, a web dashboard for admins, and even stronger security.

---

### Slide 12: References
**Sources Used**

- Aboelazm, K. S. (2023). *Challenges of e-voting systems*.
- Muhammad Siddique & Afia Saadat (2024). *Importance of voting in democratic systems*.
- Dargahi Nob

ari et al. (2021). *Security in Telegram bots*.
- Jordan et al. (2023). *Internet voting research agenda*.
- NACOS (2024). *Feedback on election trust*.

*Notes for Presentation*:  
These are the main sources I used to guide my project. They helped me understand e-voting challenges, Telegram’s security, and what students think about elections. Full details are in my report.

---

### Slide 13: Acknowledgement
**Thank You to…**

- God for guidance.
- My parents, Mr. and Mrs. Asuquo Solomon, for support.
- My supervisor, Mr. Chukwuebuka Ejiobih, for advice.
- NACOS members and friends for feedback and testing.
- Covenant University for the opportunity.

*Notes for Presentation*:  
I want to thank God for guiding me. Big thanks to my parents for their love and support. My supervisor, Mr. Ejiobih, gave me great advice. Thank you to NACOS members and friends who tested the bot and shared feedback. And thanks to Covenant University for this opportunity.

---

### Slide 14: Demo
**Let’s See It in Action!**

- I’ll show a quick demo of the bot:
  - How to register as a voter (/register).
  - How to vote (/vote).
  - How to check results (/results).
  - Admin features like setting the voting period (/set_voting_period).
- Watch how simple and secure it is!

*Notes for Presentation*:  
Now, let me show you the bot in action! I’ll walk through registering as a voter, casting a vote, checking results, and some admin tasks like setting the voting period. You’ll see how easy and secure it is. [Prepare a short, scripted demo—practice it to feel confident. Focus on 2-3 key commands and keep it under 2 minutes.]

---

### Slide 15: Thank You
**Thank You for Listening!**

- Questions? I’m happy to answer.
- Contact: [Your email or Telegram handle, if allowed].
- Let’s make NACOS elections better together!

*Notes for Presentation*:  
That’s all! Thank you for listening. I’m ready for any questions you have. Feel free to reach out to me later. Let’s make NACOS elections better with this bot! [Smile, pause, and invite questions calmly.]

---

### Tips for Presenting with Stage Fright
1. **Practice**: Rehearse each slide 3-5 times, reading the *Notes for Presentation* aloud to get comfortable. Time yourself (aim for 8-10 minutes total).
2. **Simplify**: Stick to the key points on each slide. Don’t read everything—just summarize in your own words using the notes.
3. **Breathe**: Take deep breaths before starting and pause briefly between slides to stay calm.
4. **Engage**: Look at friendly faces in the audience or the back of the room to feel less nervous.
5. **Visual Aids**: Point to the slides or demo to shift focus from yourself to the content.
6. **Backup Plan**: If you forget something, glance at the slide or say, “Let me highlight the main point here…” and move on.

This presentation is concise, uses simple language, and repeats key ideas to reinforce your message. The notes are conversational to help you sound natural. Practice the demo separately to ensure it’s smooth. You’ve got this! Let me know if you need help refining the demo script or practicing specific parts.